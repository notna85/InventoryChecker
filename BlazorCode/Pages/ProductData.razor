@page "/productdata"

@using InventoryChecker.Data
@using InventoryChecker.Data.Entities
@using Microsoft.AspNetCore.ProtectedBrowserStorage
@inject ProductService ProductDataService
@inject NavigationManager NavMan
@inject IToastService ToastService
@inject ProtectedSessionStorage ProtectedSession

@if (CurrentCategory == "")
{
    GoToMain();
}
@if (productModels == null)
{
    <p style="margin-left: 20px"><em>Loading...</em></p>
}
else
{
    @*---Menu---*@
    <div style="position: sticky; top: 0px; background-color: var(--BG-color)">
        <div style="display:grid; grid-template-columns: 200px 240px calc(100% - 880px) 240px 200px; padding: 20px">
            <div>
                <button class="btn-ui btn-blue" @onclick="GoToMain">Kategorier</button>
            </div>
            <div>
            </div>
            <div style="display:flex; justify-content: center">
                <h1 style="font-family: Copperplate Gothic Light, Helvetica; color: var(--dark-text-color)">- @CurrentCategory -</h1>
            </div>
            <div style="align-content: center">
                @if (LoginStatus == true)
                {
                    <button class="btn-ui btn-lightblue" @onclick="PrepareAddNewDialog">Tilføj produkt</button>
                }
            </div>
            <div style="align-content: center">
                @if (LoginStatus == false)
                {
                    <button class="btn-ui btn-blue" @onclick='() => ShowLoginDialog = true'>Log på</button>
                }
                else
                {
                    <button class="btn-ui btn-blue" @onclick='() => SetLoginStatus(false)'>Log af</button>
                }
            </div>
        </div>
        <div style="display: grid; grid-template-columns: calc((100% - ((@ColumnCount * 200px) + 250px))/2) 250px repeat(@ColumnCount, 200px) calc((100% - ((@ColumnCount * 200px) + 250px))/2); height: 50px; color: var(--light-text-color); background-color: #31588c; box-shadow: 0 4px 8px 0px #556688">
            <div></div>
            <div></div>
            @foreach (StorageType storage in storagesByCategory)
            {
                <div style="line-height: 50px; text-align: center; font-size: 20px">@storage.Stype.ToUpper()</div>
            }
            <div></div>
        </div>
    </div>
    @*---Database result---*@
    <div style="padding: 10px 0 10px 0">
        @foreach (ProductModel pm in productModels)
        {
            <div style="display: grid; grid-template-columns: calc((100% - ((@ColumnCount * 200px) + 250px))/2) auto calc((100% - ((@ColumnCount * 200px) + 250px))/2); margin-bottom: 10px">
                <div></div>
                <div class="datarow" style="display: grid; grid-template-columns: 250px repeat(@ColumnCount, 200px); padding: 15px 0 15px 0; border-radius: 45px">
                    <div style="line-height: 60px; color: var(--dark-text-color); text-align: center; font-size: 24px; font-style: italic">
                        @pm.Product.PName
                    </div>
                    @foreach (StorageType storage in storagesByCategory)
                    {
                        found = false;
                        currentIndex = 0;
                        @foreach (ProductAmount pa in pm.ProductAmountList)
                        {
                            if (storage.Stype.ToLower().Equals(pa.StorageType.ToLower()))
                            {
                                found = true;
                                break;
                            }
                            else
                            {
                                currentIndex++;
                            }
                        }
                        if (found)
                        {
                            int i = currentIndex;
                            <div style="margin:auto">
                                <div style="display: grid; grid-template-columns: 50px 60px 50px">
                                    @if (pm.ProductAmountList[i].Amount > 0)
                                    {
                                        <div style="padding: 15px 0px 0px 5px">
                                            <button class="btn-round btn-yellow" style="border-radius: 15px 0 0 15px" @onclick='() => UpdateAmount(pm.ProductAmountList[i], -1)'>-</button>
                                        </div>
                                    }
                                    else
                                    {
                                        <div style="padding: 15px 0px 0px 5px">
                                            <div class="btn-round btn-faded" style="border-radius: 15px 0 0 15px; cursor: default; text-align: center">-</div>
                                        </div>
                                    }
                                    <div style="width: 60px; height: 60px; font-weight: bold; font-size: 24px; text-align: center; line-height: 60px; color: @SetTextColor(pm.ProductAmountList[i].Amount); background-color: #fff; border-radius: 50%; box-shadow: inset 0 0 0 1px #ddd">
                                        @pm.ProductAmountList[i].Amount
                                    </div>
                                    @if (pm.ProductAmountList[i].Amount < 999)
                                    {
                                        <div style="padding: 15px 0px 0px 5px">
                                            <button class="btn-round btn-yellow" style="border-radius: 0 15px 15px 0" @onclick='() => UpdateAmount(pm.ProductAmountList[i], 1)'>+</button>
                                        </div>
                                    }
                                    else
                                    {
                                        <div style="padding: 15px 0px 0px 5px">
                                            <div class="btn-round btn-faded" style="border-radius: 0 15px 15px 0; cursor: default; text-align: center">+</div>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                        else
                        {
                            <div style="margin: auto">
                                <div style="display: grid; grid-template-columns: 50px 60px 50px">
                                    <div style="padding: 15px 0px 0px 5px">
                                        <div style="width: 40px; height: 30px; background-color: #fffc; border-radius: 15px 0 0 15px"></div>
                                    </div>
                                    <div style="width: 60px; height: 60px; background-color: #fffc; border-radius: 50%"></div>
                                    <div style="padding: 15px 0px 0px 5px">
                                        <div style="width: 40px; height: 30px; background-color: #fffc; border-radius: 0 15px 15px 0"></div>
                                    </div>
                                </div>
                            </div>
                            @*<div style="width: 160px; margin: auto"></div>*@
                        }
                    }
                </div>
                <div>
                    @if (LoginStatus == true)
                    {
                        <div style="display: grid; grid-template-columns: 50px 20px 50px; margin-left: 20px; margin-top: 20px">0
                            <div>
                                <button class="btn-ui btn-lightblue" style="width: 50px; font-size: 30px" @onclick='() => PrepareEditDialog(pm)'>&#9998</button>
                            </div>
                            <div></div>
                            <div>
                                <button class="btn-ui btn-red" style="width: 50px" @onclick='() => PrepareDeleteConfirmDialog(pm.Product)'>X</button>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
}

@if (ShowProductDialog == true)
{
    <div class="modal" tabindex="-1" style="display: block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content dialog-style">
                <div class="modal-header" style="border-bottom: none">
                    <h3 class="modal-title" style="margin: auto; font-family: Copperplate Gothic Light, Helvetica">- @ProductDialogTitle.ToUpper() -</h3>
                </div>
                <div class="modal-body" style="padding: 20px 40px 40px 40px">
                    <label style="font-size: 20px; font-style: italic">Navn</label>
                    <input class="form-control" type="text" style="font-size: 20px; box-shadow: inset 2px 2px 5px #0005" @bind="prodName" />
                    @if (nameExist == true)
                    {
                        <div style="height: 40px; color: red; font-size: 20px; font-style: italic">*Navnet findes allereden i databasen!</div>
                    }
                    else if (nameEmpty == true)
                    {
                        <div style="height: 40px; color: red; font-size: 20px; font-style: italic">*Navnefeltet må ikke være tomt!</div>
                    }
                    else
                    {
                        <div style="height: 40px"></div>
                    }
                    @foreach (StorageType storage in storagesAll)
                    {
                        boxChecked = false;
                        @if (checkedStorages.Contains(storage.Stype))
                        {
                            boxChecked = true;
                        }
                        <label class="checkbox-container">
                            @storage.Stype
                            <input type="checkbox" id="@storage.Stype" checked=@boxChecked @onchange='eventArgs => BoxChecked(storage.Stype, eventArgs.Value)' style="height: 0" />
                            <span class="checkbox-custom"></span>
                        </label>
                        <br />
                    }
                    @if (checkboxEmpty == true)
                    {
                        <div style="height: 40px; color: red; font-size: 20px; font-style: italic">*Vælg mindst en opbevaringstype!</div>
                    }
                    else
                    {
                        <div style="height: 40px"></div>
                    }
                    <br />
                    <div style="display: flex; justify-content: center">
                        @if (IsEdit == true)
                        {
                            <button class="btn-ui btn-blue" style="margin-right: 10px" @onclick="CheckIfShouldConfirm">Gem</button>
                        }
                        else
                        {
                            <button class="btn-ui btn-blue" style="margin-right: 10px" @onclick="AddNewProduct">Gem</button>
                        }
                        <button class="btn-ui btn-blue" style="margin-left: 10px" @onclick="CloseProductDialog">Luk</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (ShowConfirmDialog == true)
{
    <div class="modal" tabindex="-1" style="display: block; background-color: rgba(0,0,0,0.5)" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content dialog-style">
                <div class="modal-body" style="padding: 40px 40px 40px 40px">
                    <div style="font-size: 20px; font-style: italic">
                        @ConfirmDialogText
                        <br />
                        Er du sikker?
                    </div>
                    <br />
                    <div style="display: flex; justify-content: center">
                        @if (IsEdit == true)
                        {
                            <button class="btn-ui btn-red" style="margin-right: 10px" @onclick="EditProduct">Ja</button>
                        }
                        else
                        {
                            <button class="btn-ui btn-red" style="margin-right: 10px" @onclick='() => RemoveProduct(ChosenProduct)'>Ja</button>
                        }
                        <button class="btn-ui btn-blue" style="margin-left: 10px" @onclick="CloseConfirmDialog">Nej</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show" style="visibility: hidden !important"></div>
}

@if (ShowLoginDialog == true)
{
    <div class="modal" tabindex="-1" style="display: block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content dialog-style">
                <div class="modal-body" style="padding: 40px 40px 40px 40px">
                    <label style="font-size: 20px; font-style: italic">Indtast adgangskode</label>
                    <input class="form-control" type="password" style="font-size: 20px; box-shadow: inset 2px 2px 5px #0005" @bind="password" />
                    @if (passwordError == true)
                    {
                        <div style="height: 40px; color: red; font-size: 20px; font-style: italic">*Forkert adgangskode!</div>
                    }
                    else
                    {
                        <div style="height: 40px"></div>
                    }
                    <br />
                    <div style="display: flex; justify-content: center">
                        <button class="btn-ui btn-blue" style="margin-right: 10px" @onclick="ValidateLogin">Log på</button>
                        <button class="btn-ui btn-blue" style="margin-left: 10px" @onclick="CloseLoginDialog">Luk</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code
{
    private List<ProductModel> productModels;
    private List<StorageType> storagesByCategory;
    private List<StorageType> storagesAll;
    private List<string> checkedStorages = new List<string>();
    private List<string> uncheckedStorages = new List<string>();

    private string prodName = "";
    private string prodNameOld = "";
    public string CurrentCategory { get; set; }
    public string ProductDialogTitle { get; set; }
    public string ConfirmDialogText { get; set; }
    public Product ChosenProduct { get; set; }
    private string password = "";

    private int currentIndex;
    public int ColumnCount { get; set; }

    private bool found;
    private bool boxChecked;
    public bool LoginStatus { get; set; } = false;
    public bool IsEdit { get; set; }
    public bool ShowProductDialog { get; set; }
    public bool ShowConfirmDialog { get; set; }
    public bool ShowLoginDialog { get; set; }
    private bool nameEmpty;
    private bool nameExist;
    private bool checkboxEmpty;
    private bool passwordError;

    protected override async Task OnInitializedAsync()
    {
        //CurrentCategory = ProductService.ChosenCategory;
        CurrentCategory = await ProtectedSession.GetAsync<string>("category");
        LoginStatus = await ProtectedSession.GetAsync<bool>("Login");
        if (CurrentCategory.Length > 0)
        {
            storagesAll = await ProductDataService.GetStorageTypes();
            await LoadProducts();
        }
    }

    private async Task<List<ProductModel>> CreateProductModelList(string category)
    {
        List<ProductModel> pmList = new List<ProductModel>();
        List<Product> pList = await ProductDataService.GetProductsByCategory(category);
        foreach (Product p in pList)
        {
            List<ProductAmount> paList = await ProductDataService.GetProductAmountsByProduct(p);
            ProductModel pm = new ProductModel(p, paList);
            pmList.Add(pm);
        }
        return pmList;
    }

    private void BoxChecked(string storage, object checkedValue) //Adds to one list and removes from another depending on whether the checkbox is checked or not
    {
        if ((bool)checkedValue)
        {
            if (!checkedStorages.Contains(storage))
            {
                checkedStorages.Add(storage);
            }
            if (uncheckedStorages.Contains(storage))
            {
                uncheckedStorages.Remove(storage);
            }
        }
        else
        {
            if (checkedStorages.Contains(storage))
            {
                checkedStorages.Remove(storage);
            }
            if (!uncheckedStorages.Contains(storage))
            {
                uncheckedStorages.Add(storage);
            }
        }
    }
    private async Task ValidateLogin()
    {
        Hash256 hash = new Hash256();
        string hashedPassword = hash.GenerateHash(password);

        if (ProductDataService.CheckLogin(hashedPassword) == true)
        {
            await SetLoginStatus(true);
            CloseLoginDialog();
            ToastService.ShowSuccess("Login succesfuld!");
        }
        else
        {
            passwordError = true;
        }
    }
    private async Task SetLoginStatus(bool isLoggedIn)
    {
        LoginStatus = isLoggedIn;
        await ProtectedSession.SetAsync("Login", isLoggedIn);
    }
    private void CloseLoginDialog()
    {
        password = "";
        passwordError = false;
        ShowLoginDialog = false;
    }
    private bool IsValidSubmit() //Method checks if submitted data meets the requirements and returns a boolean value depending on the results
    {
        if (prodName.ToUpper() != prodNameOld.ToUpper())
        {
            if (ProductDataService.ProductExists(prodName) == true)
                nameExist = true;
            else
                nameExist = false;
        }
        else
            nameExist = false;

        if (prodName.Length == 0)
            nameEmpty = true;
        else
            nameEmpty = false;

        if (checkedStorages.Count == 0)
            checkboxEmpty = true;
        else
            checkboxEmpty = false;

        if (!nameExist && !nameEmpty && !checkboxEmpty)
            return true;
        else
            return false;
    }
    private async Task AddNewProduct()
    {
        if (IsValidSubmit() == true)
        {
            List<ProductAmount> paList = new List<ProductAmount>();
            Product product = new Product(prodName, CurrentCategory);
            foreach (string storage in checkedStorages)
            {
                paList.Add(new ProductAmount(prodName, storage, 0));
            }
            ProductDataService.AddProduct(product, paList);
            await FinishUp("Produkt tilføjet!");
        }
    }
    private async Task EditProduct()
    {
        if (IsValidSubmit() == true)
        {
            ProductDataService.UpdateProduct(prodNameOld, prodName, checkedStorages, uncheckedStorages);
            await FinishUp("Produkt opdateret!");
        }
    }
    private void PrepareAddNewDialog()
    {
        IsEdit = false;
        ProductDialogTitle = "Tilføj produkt";
        ShowProductDialog = true;
    }
    private void PrepareEditDialog(ProductModel productModel)
    {
        prodName = productModel.Product.PName;
        prodNameOld = prodName;
        foreach (ProductAmount pa in productModel.ProductAmountList)
        {
            checkedStorages.Add(pa.StorageType);
        }
        foreach (StorageType storage in storagesAll)
        {
            if (!checkedStorages.Contains(storage.Stype))
            {
                uncheckedStorages.Add(storage.Stype);
            }
        }
        IsEdit = true;
        ProductDialogTitle = "Opdater produkt";
        ShowProductDialog = true;
    }
    private void CloseProductDialog() //Resets a bunch of variables to make them ready to be used again
    {
        nameEmpty = false;
        nameExist = false;
        checkboxEmpty = false;
        prodName = "";
        prodNameOld = "";
        checkedStorages.Clear();
        uncheckedStorages.Clear();
        ShowProductDialog = false;
    }
    private async Task UpdateAmount(ProductAmount productAmount, int amount)
    {
        ProductDataService.UpdateProductAmount(productAmount, amount);
        await LoadProducts();
    }
    private async Task CheckIfShouldConfirm()
    {
        if (IsValidSubmit() == true)
        {
            if (ProductDataService.ProductAmountExists(prodNameOld, uncheckedStorages) == true)
                PrepareEditConfirmDialog();
            else
                await EditProduct();
        }
    }
    private void PrepareEditConfirmDialog()
    {
        IsEdit = true;
        ConfirmDialogText = "En eller flere opbevaringstyper er blevet fravalgt. Eksisterende data vil blive slettet.";
        ShowConfirmDialog = true;
    }
    private void PrepareDeleteConfirmDialog(Product product)
    {
        ChosenProduct = product;
        IsEdit = false;
        ConfirmDialogText = "All data for det her produktet vil blive slettet.";
        ShowConfirmDialog = true;
    }
    private void CloseConfirmDialog()
    {
        ChosenProduct = new Product();
        ShowConfirmDialog = false;
    }
    private string SetTextColor(int amount) //Sets the textcolor to red if a product's amount reaches 0 or maximum
    {
        string textColor;
        if (amount > 0 && amount < 999)
            textColor = "black";
        else
            textColor = "red";

        return textColor;
    }
    private async Task RemoveProduct(Product product)
    {
        ProductDataService.RemoveProduct(product);
        await FinishUp("Produkt slettet!");
    }
    private async Task FinishUp(string toastMessage) //Calls methods to finish up a successful operation
    {
        if (ShowConfirmDialog == true)
            CloseConfirmDialog();

        if (ShowProductDialog == true)
            CloseProductDialog();

        ToastService.ShowSuccess(toastMessage);
        await LoadProducts();
    }
    private void GoToMain() //Navigates to the index page
    {
        NavMan.NavigateTo("/");
    }
    private async Task LoadProducts() //Fetches the content from the database and refeshes the UI if content is different from last fetch
    {
        storagesByCategory = await ProductDataService.GetStorageTypesByCategory(CurrentCategory);
        ColumnCount = storagesByCategory.Count();
        productModels = await CreateProductModelList(CurrentCategory);
        await InvokeAsync(StateHasChanged);
    }
}