@page "/productdata"

@using InventoryChecker.Data
@using InventoryChecker.Data.Entities
@inject ProductService ProductDataService
@inject NavigationManager NavMan
@inject IJSRuntime JsRunTime


@if (ShowAddNew == true)
{
    <div class="modal" tabindex="-1" style="display: block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Add Product</h3>
                    <button type="button" class="close" @onclick='() => ShowAddNew = false'><span aria-hidden="true"></span>X</button>
                </div>
                <div class="modal-body">
                    <label>Name</label>
                    <input class="form-control" type="text" @bind="prodName" />
                    <br />
                    @foreach (StorageType storage in storages)
                    {
                        <input type="checkbox" id="@storage.Stype" @onchange='eventArgs => BoxChecked(storage.Stype, eventArgs.Value)' style="width: 30px; height: 30px" />
                        <label for="@storage.Stype">@storage.Stype</label>
                        <br />
                    }
                    <br />
                    <div style="display: flex; justify-content: center">
                        <button class="btn btn-primary" @onclick="AddNewProduct">Save</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}
@if (CurrentCategory == "")
{
    GoToMain();
}

@if (productModels == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div style="width: 1000px; height: 100%; margin: auto">
        <div style="position: sticky; top: 0px; padding: 0 10px 0 10px; background-color: lightblue">
            <div style="display: flex">
                <div style="flex-grow: 1">
                    <button class="btn btn-primary" @onclick="GoToMain">Kategorier</button>
                </div>
                <div style="align-content: center">
                    <button class="btn btn-primary" @onclick='() => ShowAddNew = true'>Tilføj Produkt</button>
                </div>
            </div>
            <br />
            <div style="display:flex; justify-content: center; padding: 10px 0 10px 0">
                <h1>@CurrentCategory</h1>
            </div>
            <div style="display: grid; grid-template-columns: 150px repeat(@ColumnCount, calc((100% - 250px)/@ColumnCount)) 100px; height: 50px; background-color: cadetblue; border-radius: 25px">
                <div style="font-weight: bold; line-height: 50px; text-align: center">Name</div>
                @foreach (StorageType storage in storages)
                {
                    <div style="font-weight: bold; line-height: 50px; text-align: center">@storage.Stype</div>
                }
                <div></div>
            </div>
        </div>
        <div style="padding: 10px">
            @foreach (ProductModel pm in productModels)
            {
                <div style="display: grid; grid-template-columns: 150px repeat(@ColumnCount, calc((100% - 250px)/@ColumnCount)) 100px; padding: 20px 0 20px 0; margin-bottom: 10px; background-color: white; border-radius: 45px">
                    <div style="line-height: 50px; text-align: center; font-weight: bold">@pm.Product.PName</div>
                    @foreach (StorageType storage in storages)
                    {
                        found = false;
                        currentIndex = 0;
                        @foreach (ProductAmount pa in pm.ProductAmountList)
                        {
                            if (storage.Stype.ToLower().Equals(pa.StorageType.ToLower()))
                            {
                                found = true;
                                break;
                            }
                            else
                            {
                                currentIndex++;
                            }
                        }
                        if (found)
                        {
                            int i = currentIndex;
                            <div style="width: 150px; margin:auto">
                                <div style="display: grid; grid-template-columns: 50px 50px 50px">
                                    <div>
                                        <button class="btn btn-round" @onclick='() => UpdateAmount(pm.ProductAmountList[i], -1)'>-</button>
                                    </div>
                                    <div style="width: 50px; font-weight: bold; font-size: 24px; text-align: center; line-height: 50px">
                                        @pm.ProductAmountList[i].Amount
                                    </div>
                                    <div>
                                        <button class="btn btn-round" @onclick='() => UpdateAmount(pm.ProductAmountList[i], 1)'>+</button>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div style="width: 150px; margin: auto"></div>
                        }
                    }
                    <div style="margin: auto">
                        <button class="btn btn-round" style="background-color: red; font-size: 30px; font-weight: bold" @onclick='() => RemoveProduct(pm.Product.PName)'>X</button>
                    </div>
                </div>
            }
        </div>
    </div>    
}

@if (ShowDelete == true)
{

}

@code
{
    private int currentIndex;
    private bool found;
    private string prodName;
    private List<ProductModel> productModels;
    private List<StorageType> storages;
    private List<string> checkedStorages = new List<string>();
    public string CurrentCategory { get; set; }
    public bool ShowAddNew { get; set; }
    public bool ShowDelete { get; set; }
    public string ChosenProduct { get; set; }
    public int ColumnCount { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CurrentCategory = ProductService.CurrentCategory;
        productModels = await ProductDataService.GetProductsByCategory();
        storages = await ProductDataService.GetStorageTypes(CurrentCategory);
        ColumnCount = storages.Count();
    }

    private void BoxChecked(string storage, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            if (!checkedStorages.Contains(storage))
            {
                checkedStorages.Add(storage);
            }
        }
        else
        {
            if (checkedStorages.Contains(storage))
            {
                checkedStorages.Remove(storage);
            }
        }
    }

    private void AddNewProduct()
    {
        List<ProductAmount> paList = new List<ProductAmount>();
        foreach (string storage in checkedStorages)
        {
            paList.Add(new ProductAmount(prodName, storage, 0));
        }
        ProductDataService.AddProduct(new ProductModel(new Product(prodName, CurrentCategory), paList));
        ShowAddNew = false;
        prodName = "";
        checkedStorages.Clear();
        LoadProducts();
    }

    private void UpdateAmount(ProductAmount productAmount, int amount)
    {
        ProductDataService.UpdateProductAmount(productAmount, amount);
        LoadProducts();
    }

    private async void RemoveProduct(string productName)
    {
        bool confirmed = await JsRunTime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            ProductDataService.RemoveProduct(productName);
            LoadProducts();
        }
    }

    private void GoToMain()
    {
        NavMan.NavigateTo("/");
    }

    private async void LoadProducts() //Fetches the content from the database and refeshes the UI if content is different from last fetch
    {
        productModels = await ProductDataService.GetProductsByCategory();
        StateHasChanged();
    }
}
