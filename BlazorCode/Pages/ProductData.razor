@*--Component that displays data of products belonging to a chosen category--*@

@page "/productdata"

@using InventoryChecker.Data
@using InventoryChecker.Data.Entities
@using InventoryChecker.Interfaces
@using Microsoft.AspNetCore.ProtectedBrowserStorage @**--Lets you make use of the ProtectedSessionStorage feature--*@
@inject IProductService ProductDataService
@inject NavigationManager NavMan
@inject IToastService ToastService
@inject ProtectedSessionStorage ProtectedSession

@if (ProductModelList == null)
{
    <p style="margin-left: 20px"><em>Loading...</em></p>
}
else
{
    @*---Menu---*@
    <div style="position: sticky; top: 0px; background-color: var(--BG-color)">
        <div style="display:grid; grid-template-columns: 200px calc(100% - 640px) 240px 200px; padding: 20px">
            <div>
                <button class="btn-ui btn-blue" @onclick="GoToCategories">Kategorier</button>
            </div>
            <div></div>
            <div style="align-content: center; margin: 0 20px 0 20px">
                @if (LoginAdminStatus == true)
                {
                    <button class="btn-ui btn-lightblue" @onclick="PrepareAddNewDialog">Tilføj produkt</button>
                }
            </div>
            <div style="align-content: center">
                @if (LoginAdminStatus == false)
                {
                    <button class="btn-ui btn-blue" @onclick='() => SetShowLoginDialog(true)'>Log på</button>
                }
                else
                {
                    <button class="btn-ui btn-blue" @onclick='() => SetLoginStatus(false)'>Log af</button>
                }
            </div>
        </div>
        <div style="display:flex; justify-content: center; padding: 0 0 20px 0">
            <h1 style="font-family: Copperplate Gothic Light, Helvetica; color: var(--dark-text-color); margin-bottom: 0">- @CurrentCategory -</h1>
        </div>
        <div style="display: grid; grid-template-columns: calc((100% - ((@ColumnCount * 200px) + 250px))/2) 250px repeat(@ColumnCount, 200px) calc((100% - ((@ColumnCount * 200px) + 250px))/2); height: 50px; color: var(--light-text-color); background-color: #31588c; box-shadow: 0 4px 8px 0px #556688">
            <div></div>
            <div></div>
            @foreach (StorageType storage in StoragesByCategory)
            {
                <div style="line-height: 50px; text-align: center; font-size: 20px">@storage.Stype.ToUpper()</div>
            }
            <div></div>
        </div>
    </div>
    @*---Database result---*@
    <div style="padding: 10px 0 10px 0">
        @foreach (ProductModel pm in ProductModelList)
        {
            <div style="display: grid; grid-template-columns: calc((100% - ((@ColumnCount * 200px) + 250px))/2) auto calc((100% - ((@ColumnCount * 200px) + 250px))/2); margin-bottom: 10px">
                <div></div>
                <div class="datarow" style="display: grid; grid-template-columns: 250px repeat(@ColumnCount, 200px); padding: 15px 0 15px 0; border-radius: 45px">
                    <div style="line-height: 60px; color: var(--dark-text-color); text-align: center; font-size: @SetTextSize(pm.Product.PName); font-style: italic">
                        @pm.Product.PName
                    </div>
                    @foreach (StorageType storage in StoragesByCategory)
                    {
                        Found = false;
                        CurrentIndex = 0;
                        @foreach (ProductAmount pa in pm.ProductAmountList)
                        {
                            if (storage.Stype.ToLower().Equals(pa.StorageType.ToLower()))
                            {
                                Found = true;
                                break;
                            }
                            else
                            {
                                CurrentIndex++;
                            }
                        }
                        if (Found == true)
                        {
                            int i = CurrentIndex;
                            <div style="margin:auto">
                                <div style="display: grid; grid-template-columns: 50px 60px 50px">
                                    @if (pm.ProductAmountList[i].Amount > 0)
                                    {
                                        <div style="padding: 10px 0px 0px 5px">
                                            <button class="btn-round btn-yellow" style="border-radius: 20px 0 0 20px" @onclick='() => UpdateAmount(pm.ProductAmountList[i], -1)'>-</button>
                                        </div>
                                    }
                                    else
                                    {
                                        <div style="padding: 10px 0px 0px 5px">
                                            <div class="btn-round btn-faded" style="border-radius: 20px 0 0 20px; cursor: default; text-align: center">-</div>
                                        </div>
                                    }
                                    <div style="width: 60px; height: 60px; font-weight: bold; font-size: 24px; text-align: center; line-height: 60px; color: @SetTextColor(pm.ProductAmountList[i].Amount); background-color: #fff; border-radius: 50%; box-shadow: inset 0 0 0 1px #ddd">
                                        @pm.ProductAmountList[i].Amount
                                    </div>
                                    @if (pm.ProductAmountList[i].Amount < 999)
                                    {
                                        <div style="padding: 10px 0px 0px 5px">
                                            <button class="btn-round btn-yellow" style="border-radius: 0 20px 20px 0" @onclick='() => UpdateAmount(pm.ProductAmountList[i], 1)'>+</button>
                                        </div>
                                    }
                                    else
                                    {
                                        <div style="padding: 10px 0px 0px 5px">
                                            <div class="btn-round btn-faded" style="border-radius: 0 20px 20px 0; cursor: default; text-align: center">+</div>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                        else
                        {
                            <div style="margin: auto">
                                <div style="display: grid; grid-template-columns: 50px 60px 50px">
                                    <div style="padding: 10px 0px 0px 5px">
                                        <div style="width: 40px; height: 40px; background-color: #fffc; border-radius: 20px 0 0 20px"></div>
                                    </div>
                                    <div style="width: 60px; height: 60px; background-color: #fffc; border-radius: 50%"></div>
                                    <div style="padding: 10px 0px 0px 5px">
                                        <div style="width: 40px; height: 40px; background-color: #fffc; border-radius: 0 20px 20px 0"></div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
                <div>
                    @if (LoginAdminStatus == true)
                    {
                        <div style="display: grid; grid-template-columns: 50px 20px 50px; margin-left: 20px; margin-top: 20px">
                            <div>
                                <button class="btn-ui btn-lightblue" style="width: 50px; font-size: 30px" @onclick='() => PrepareEditDialog(pm)'>&#9998</button>
                            </div>
                            <div></div>
                            <div>
                                <button class="btn-ui btn-red" style="width: 50px" @onclick='() => PrepareDeleteConfirmDialog(pm.Product)'>X</button>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
}

@if (ShowProductDialog == true) //Renders the ProductDialog child component
{
    <ProductDialog IsEdit="IsEdit"
                   ProductModel="ChosenProductModel"
                   CallLoadProducts="LoadProducts"
                   ProductDialogTitle="@ProductDialogTitle"
                   CurrentCategory="@CurrentCategory"
                   StoragesAll="StoragesAll"
                   ShowProductDialog="SetShowProductDialog">
    </ProductDialog>
}

@if (ShowConfirmDialog == true) //Renders the ConfirmDialog child component
{
    <ConfirmDialog OnConfirmed="RemoveProduct"
                   ConfirmDialogText="All data for det her produktet vil blive slettet."
                   ShowConfirmDialog="SetShowConfirmDialog">
    </ConfirmDialog>
}

@if (ShowLoginDialog == true) //Renders the LoginDialog child component
{
    <LoginDialog ShowLoginDialog="SetShowLoginDialog"
                 LoginStatus="SetLoginStatus">
    </LoginDialog>
}

@code
{
    public List<ProductModel> ProductModelList { get; set; }
    public List<StorageType> StoragesByCategory { get; set; }
    public List<StorageType> StoragesAll { get; set; }

    public string CurrentCategory { get; set; }
    public string ProductDialogTitle { get; set; }
    public string ConfirmDialogText { get; set; }

    public Product ChosenProduct { get; set; }
    public ProductModel ChosenProductModel { get; set; }

    public int CurrentIndex { get; set; }
    public int ColumnCount { get; set; }

    public bool Found { get; set; }
    public bool LoginStatus { get; set; }
    public bool LoginAdminStatus { get; set; } = false;
    public bool IsEdit { get; set; }
    public bool ShowProductDialog { get; set; }
    public bool ShowConfirmDialog { get; set; }
    public bool ShowLoginDialog { get; set; }

    protected override async Task OnInitializedAsync()
    {
        LoginStatus = await ProtectedSession.GetAsync<bool>("Login");
        if (LoginStatus == false)
        {
            GoToMain();
        }
        else
        {
            CurrentCategory = await ProtectedSession.GetAsync<string>("category"); //Gets the category value from the browser memory
            if (CurrentCategory == "")
            {
                GoToCategories();
            }
            else
            {
                LoginAdminStatus = await ProtectedSession.GetAsync<bool>("LoginAdmin"); //Gets the login status from the browser memory
                StoragesAll = await ProductDataService.GetStorageTypes();
                await LoadProducts();
            }
        }
    }

    private async Task<List<ProductModel>> CreateProductModelList(string category)
    {
        List<ProductModel> pmList = new List<ProductModel>();
        List<Product> pList = await ProductDataService.GetProductsByCategory(category);
        foreach (Product p in pList)
        {
            List<ProductAmount> paList = await ProductDataService.GetProductAmountsByProduct(p);
            ProductModel pm = new ProductModel(p, paList);
            pmList.Add(pm);
        }
        return pmList;
    }

    private async Task SetLoginStatus(bool isLoggedIn)
    {
        LoginAdminStatus = isLoggedIn;
        await ProtectedSession.SetAsync("LoginAdmin", isLoggedIn); //Saves login status in the browser memory
    }

    private void PrepareAddNewDialog()
    {
        IsEdit = false;
        ProductDialogTitle = "Tilføj produkt";
        SetShowProductDialog(true);
    }
    private void PrepareEditDialog(ProductModel productModel)
    {
        ChosenProductModel = productModel;
        IsEdit = true;
        ProductDialogTitle = "Opdater produkt";
        SetShowProductDialog(true);
    }
    private void PrepareDeleteConfirmDialog(Product product)
    {
        ChosenProduct = product;
        ConfirmDialogText = "All data for det her produktet vil blive slettet.";
        SetShowConfirmDialog(true);
    }

    private void SetShowLoginDialog(bool showDialog)
    {
        ShowLoginDialog = showDialog;
    }
    private void SetShowProductDialog(bool showDialog)
    {
        ShowProductDialog = showDialog;
    }
    private void SetShowConfirmDialog(bool showDialog)
    {
        ShowConfirmDialog = showDialog;
    }

    private async Task UpdateAmount(ProductAmount productAmount, int amount)
    {
        ProductDataService.UpdateProductAmount(productAmount, amount);
        await LoadProducts();
    }
    private async Task RemoveProduct()
    {
        ProductDataService.RemoveProduct(ChosenProduct);
        ToastService.ShowSuccess("Produkt slettet!");
        await LoadProducts();
    }

    private string SetTextColor(int amount)
    {
        string textColor;
        if (amount > 0 && amount < 999)
            textColor = "black";
        else
            textColor = "red";

        return textColor;
    }
    private string SetTextSize(string name)
    {
        string textSize = "24px";
        if (name.Length > 20)
            textSize = "18px";

        return textSize;
    }

    private void GoToMain()
    {
        NavMan.NavigateTo("/");
    }
    private void GoToCategories()
    {
        NavMan.NavigateTo("categories");
    }

    private async Task LoadProducts() //Fetches content from database and refeshes UI if content is different from last fetch
    {
        StoragesByCategory = await ProductDataService.GetStorageTypesByCategory(CurrentCategory);
        ColumnCount = StoragesByCategory.Count();
        ProductModelList = await CreateProductModelList(CurrentCategory);
        await InvokeAsync(StateHasChanged);
    }
}