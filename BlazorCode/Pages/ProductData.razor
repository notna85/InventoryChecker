@page "/productdata"

@using InventoryChecker.Data
@inject ProductService ProductDataService
@inject NavigationManager NavMan

<div style="display: flex; width: 1000px">
    <div style="flex-grow: 1">
        <button class="btn btn-primary" @onclick="GoToMain">Main Menu</button>
    </div>
    <div style="width: 150px">
        <button class="btn btn-primary" @onclick="AddProduct">Add Product</button>
    </div>
    <div style="width: 150px">
        <button class="btn btn-primary">Refresh</button>
    </div>
</div>
<div style="width: 1000px; display: flex; justify-content: center">
    <h1>@CurrentCategory</h1>
</div>



@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table" style="width: 1000px">
        <thead>
            <tr>
                <th>Name</th>
                @foreach (string storage in storages)
                {
                    <th>@storage</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (Product product in products)
            {
            <tr>
                <td style="width: 100px; vertical-align: middle; font-weight: bold">@product.Name</td>
                @foreach (string storage in storages)
                {
                    found = false;
                    currentIndex = 0;
                    @foreach (ProductStorage pStorage in product.StorageType)
                    {
                        if (storage.ToLower().Equals(pStorage.Type.ToLower()))
                        {
                            found = true;
                            break;
                        }
                        else
                        {
                            currentIndex++;
                        }
                    }
                    if (found)
                    {
                        int i = currentIndex;
                        <td style="width: 150px">
                            <table class="table">
                                <tr>
                                    <td class="spec-table">
                                        <button class="btn btn-round" @onclick='() => UpdateAmount(product.Name, product.StorageType[i].Type, "-1")'>-</button>
                                    </td>
                                    <td class="spec-table" style="width: 50px; font-weight: bold; font-size: 24px; text-align: center">
                                        @product.StorageType[i].Amount
                                    </td>
                                    <td class="spec-table">
                                        <button class="btn btn-round" @onclick='() => UpdateAmount(product.Name, product.StorageType[i].Type, "+1")'>+</button>
                                    </td>
                                    <td class="spec-table" style="width: 50px"></td>
                                </tr>
                            </table>
                        </td>
                    }
                    else 
                    {
                        <td style="width: 150px"></td>                    
                    }
                }
            </tr>
            }
        </tbody>
    </table>
}

@code
{
    private int currentIndex;
    private bool found;
    private List<Product> products;
    private List<String> storages;
    public string CurrentCategory { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CurrentCategory = ProductDataService.CurrentCategory;
        products = await ProductDataService.GetProductsByCategory();
        storages = await ProductDataService.GetStorageTypes();
    }
    private async void UpdateAmount(string product, string storage, string amount)
    {
        ProductDataService.UpdateProductAmount(product, storage, amount);
        products = await ProductDataService.GetProductsByCategory();
    }
    private void AddProduct()
    {

    }
    private void GoToMain()
    {
        NavMan.NavigateTo("/");
    }
}
