@page "/productdata"

@using InventoryChecker.Data
@using InventoryChecker.Data.Entities
@inject ProductService ProductDataService
@inject NavigationManager NavMan

<div style="display: flex; width: 1000px">
    <div style="flex-grow: 1">
        <button class="btn btn-primary" @onclick="GoToMain">Main Menu</button>
    </div>
    <div style="width: 150px">
        <button class="btn btn-primary" @onclick='() => ShowAddNew = true'>Add Product</button>
    </div>
    <div style="width: 150px">
        <button class="btn btn-primary">Refresh</button>
    </div>
</div>
<div style="display:flex; justify-content: center; width: 1000px">
    <h1>@CurrentCategory</h1>
</div>

@if (ShowAddNew == true)
{
    <div class="modal" tabindex="-1" style="display: block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Add Product</h3>
                    <button type="button" class="close" @onclick='() => ShowAddNew = false'><span aria-hidden="true"></span>X</button>
                </div>
                <div class="modal-body">
                    <label>Name</label>
                    <input class="form-control" type="text" @bind="prodName" />
                    <br />
                    @foreach (StorageType storage in storages)
                    {
                        <input type="checkbox" id="@storage.Stype" @onchange='eventArgs => BoxChecked(storage.Stype, eventArgs.Value)' style="width: 30px; height: 30px" />
                        <label for="@storage.Stype">@storage.Stype</label>
                        <br />
                    }
                    <br />
                    <div style="display: flex; justify-content: center">
                        <button class="btn btn-primary" @onclick="AddNewProduct">Save</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}
@if(CurrentCategory == "")
{
    GoToMain();
}

@if (productModels == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table" style="width: 1000px">
        <thead>
            <tr>
                <th>Name</th>
                @foreach (StorageType storage in storages)
                {
                    <th>@storage.Stype</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (ProductModel pm in productModels)
            {
                <tr>
                    <td style="width: 100px; vertical-align: middle; font-weight: bold">@pm.Product.PName</td>
                    @foreach (StorageType storage in storages)
                    {
                        found = false;
                        currentIndex = 0;
                        @foreach (ProductAmount pa in pm.ProductAmountList)
                        {
                            if (storage.Stype.ToLower().Equals(pa.StorageType.ToLower()))
                            {
                                found = true;
                                break;
                            }
                            else
                            {
                                currentIndex++;
                            }
                        }
                        if (found)
                        {
                            int i = currentIndex;
                            <td>
                                <table class="table" style="margin: 0">
                                    <tr>
                                        <td class="spec-table">
                                            <button class="btn btn-round" @onclick='() => UpdateAmount(pm.ProductAmountList[i], -1)'>-</button>
                                        </td>
                                        <td class="spec-table" style="width: 50px; font-weight: bold; font-size: 24px; text-align: center">
                                            @pm.ProductAmountList[i].Amount
                                        </td>
                                        <td class="spec-table">
                                            <button class="btn btn-round" @onclick='() => UpdateAmount(pm.ProductAmountList[i], 1)'>+</button>
                                        </td>
                                        <td class="spec-table" style="width: 50px"></td>
                                    </tr>
                                </table>
                            </td>
                        }
                        else
                        {
                            <td style="width: 200px"></td>

                        }
                    }
                    <td>
                        <button class="btn btn-primary" @onclick='() => RemoveProduct(pm.Product.PName)'>Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code
{
    private int currentIndex;
    private bool found;
    private string prodName;
    private List<ProductModel> productModels;
    private List<StorageType> storages;
    private List<string> checkedStorages = new List<string>();
    public string CurrentCategory { get; set; }
    public bool ShowAddNew { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CurrentCategory = ProductService.CurrentCategory;
        productModels = await ProductDataService.GetProductsByCategory();
        storages = await ProductDataService.GetStorageTypes();
    }

    private void BoxChecked(string storage, object checkedValue)
    {
        if((bool) checkedValue)
        {
            if(!checkedStorages.Contains(storage))
            {
                checkedStorages.Add(storage);
            }
        }
        else
        {
            if(checkedStorages.Contains(storage))
            {
                checkedStorages.Remove(storage);
            }
        }
    }

    private void AddNewProduct()
    {
        List<ProductAmount> paList = new List<ProductAmount>();
        foreach(string storage in checkedStorages)
        {
            paList.Add(new ProductAmount(prodName, storage, 0));
        }
        ProductDataService.AddProduct(new ProductModel(new Product(prodName, CurrentCategory), paList));
        ShowAddNew = false;
        prodName = "";
        checkedStorages.Clear();
        LoadProducts();
    }

    private void UpdateAmount(ProductAmount productAmount, int amount)
    {
        ProductDataService.UpdateProductAmount(productAmount, amount);
        LoadProducts();
    }

    private void RemoveProduct(string productName)
    {
        ProductDataService.RemoveProduct(productName);
        LoadProducts();
    }

    private void GoToMain()
    {
        NavMan.NavigateTo("/");
    }

    private async void LoadProducts()
    {
        productModels = await ProductDataService.GetProductsByCategory();
        StateHasChanged();
    }
}
